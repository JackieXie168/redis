This is the Garantia Data custom Redis version, which is based on the publicly
available Redis 2.6 with various additional features we use internally.

This file provides some high-level documentation of the additional features.

Conditional Replication
-----------------------

Conditional replication allows slaves and masters to avoid replication if the
data on both ends is identical.  This is done by maintaining a 'dbversion'
value which gets updated on every write (a kind of incremental hash). The
SYNC command is extended to allow slaves to announce their dbversion and
request replication from scratch only if it mismatches the master's dbversion.

The 'dbversion' value is stored in the RDB, which makes it incompatible with
stock Redis RDB files.


Different BGSAVE Types
----------------------

Redis uses the same BGSAVE mechanism for persistence and for slave-trigerred
replication.  In order for this to work well while persistence policies are
managed, we introduce the following changes:

- A 'syncdbfilename' configuration parameter allows us to use a different
  RDB file for SYNC handling (on the master side).  If not specified, the
  'dbfilename' paramter will be used instead.

- When 'syncdbfilename' is defined, background saves performed for the
  purpose of replication don't overwrite the usual RDB file and do not
  affect the 'rdb_last_save_time', 'rdb_changes_since_last_save',
  and 'rdb_last_bgsave_...' fields.

In addition, we provide a dedicated BGSAVETO command which triggers a
background save operation to a specific file.  This operation also doesn't
modify the fields above.


Additional Redis Configuration Parameters
-----------------------------------------

load-on-startup
    Provides the ability to disable auto-loading of RDB/AOF files on startup,
    even if they exist.  This is useful on slaves that would immediately need
    to replicate from masters anyway.



New/Modified Redis Commands
---------------------------

SYNC <dbversion>
    When sent by a slave, the master will compare the requested dbversion to
    its own.  If identical, it will respond with "+INSYNC" and skip creation
    of RDB file.  Instead, it will begin sending the command stream as if
    the RDB creation and transmission was complete.

    dbversion is a hash-like value that gets updated whenever a write
    operation is performed and represents a database "state".  It is also
    stored in RDB files.

SYNCNOW
    Initiates a slave-like SYNC operation, but requires the server to proceed
    only if no other SYNC is in progress.  Essentially this means the RDB we
    will be receiving represents the current database state without applying
    any additional queued commands.

    The server responds with an ERROR if another SYNC or BGSAVE are already
    in progress.  Otherwise, a 2-part multibulk is returned immediately with
    the first part being a "+SYNC STARTED" status.  The 2nd part is sent
    as soon as the RDB is created and includes the contents of the RDB, and
    the connection continues to behave as a standard slave connection. 

BGSAVETO <filename>
    Initiate an ad-hoc BGSAVE operation to a specific file.  The file will
    be created in the working directory specified by the global 'dir'
    parameter.  This background save operation is transparent and does not
    update the regular save parameters (rdb_last_save_time,
    rdb_changes_since_last_save, rdb_last_bgsave_status, etc.) so it does not
    disrupt on-going persistence policy.

DRAIN
    Provide a safety mechanism to guarnatee that all slaves are up to date.
    This includes: (a) verifying that all slaves are online; (b) verifying
    that the network buffers of slave connections are empty.

    DRAIN returns "+DRAINED" if all slaves are up-to-date as described above.
    Otherwise, "+DRAINING" is returned and the server enters a draining-state
    in which it will not accept any command other than INFO, PING or DRAIN
    (which is expected to be used by the caller to poll the server state).

